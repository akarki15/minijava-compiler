/* This file was generated by the Amherst version of SableCC */

package minijava.Typechecker;

import minijava.node.*;
import java.util.*;
import minijava.Type.*;


public class Phase2
{
	private Typechecker typechecker;
	private SymbolTable st;
	
	public Phase2(Typechecker t){	
		typechecker=t;
		typechecker.createSymbolTable();
		st=typechecker.returnST(); //storing locally to be able to reference it frequently	
	}
	

    void process(Node n) {
    	 throw new RuntimeException(this.getClass() + ": no process method available for " 
	     + n.getClass());
    }

    ///////////////////////////////////////////////////////////////
    void process(Start n) {
         process(n.getPProgram());                   
    }

    ///////////////////////////////////////////////////////////////
    void process(PProgram n) {
        if (n instanceof AProgram) process((AProgram)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PProgram)");

        
    }

    ///////////////////////////////////////////////////////////////
    void process(AProgram n) {
        n.getPublic();				// yields TPublic
        n.getClasstok();				// yields TClasstok
        n.getId();				// yields TId
        n.getLbrace();				// yields TLbrace
	for (PMaindecl p : n.getMaindecl())
	    process(p);				// process(PMaindecl)
        n.getRbrace();				// yields TRbrace

        
    }

    ///////////////////////////////////////////////////////////////
    void process(PMaindecl n) {
        if (n instanceof AVarMaindecl) process((AVarMaindecl)n);
	else if (n instanceof AMethodMaindecl) process((AMethodMaindecl)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PMaindecl)");

        
    }

    ///////////////////////////////////////////////////////////////
    void process(AVarMaindecl n) {
        process(n.getPrivacy());			// process(PPrivacy)
        n.getStatic();				// yields TStatic
        process(n.getType());			// process(PType)
        n.getId();				// yields TId
        n.getSemi();				// yields TSemi

        
    }

    ///////////////////////////////////////////////////////////////
    void process(AMethodMaindecl n) {
        //process(n.getPrivacy());			// process(PPrivacy)
        //n.getStatic();				// yields TStatic
        //process(n.getType());			// process(PType)
        //n.getId();				// yields TId
        //n.getLparen();				// yields TLparen
        //process(n.getParamlist());			// process(PParamlist)
        //n.getRparen();				// yields TRparen
        //n.getLbrace();				// yields TLbrace
    	
    	st.activeMethod=typechecker.returnMethod(n.getId().toString());
    	st.incScope(true);
    	    	
    
    	for (PStmt p : n.getStmt())
    		process(p);				// process(PStmt)	
		st.decScope();
		//Checking whether the returned type matches the return type declared in the method. 		
		
		st.activeMethod=null;			// Since we are now outside the method		
    	//n.getRbrace();				// yields TRbrace
    	        
    }

    ///////////////////////////////////////////////////////////////
    void process(PParamlist n) {
        if (n instanceof AListParamlist) process((AListParamlist)n);
	else if (n instanceof AEmptyParamlist) process((AEmptyParamlist)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PParamlist)");

        
    }

    ///////////////////////////////////////////////////////////////
    void process(AListParamlist n) {
        process(n.getType());			// process(PType)
        n.getId();				// yields TId
	for (PParam p : n.getParam())
	    process(p);				// process(PParam)
	throw new UnsupportedOperationException ();     // remove when method is complete
        
    }

    ///////////////////////////////////////////////////////////////
    void process(AEmptyParamlist n) {
    	throw new UnsupportedOperationException ();     // remove when method is complete
        
    }

    ///////////////////////////////////////////////////////////////
    void process(PParam n) {
        if (n instanceof AParam) process((AParam)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PParam)");

        
    }

    ///////////////////////////////////////////////////////////////
    void process(AParam n) {
        n.getComma();				// yields TComma
        process(n.getType());			// process(PType)
        n.getId();				// yields TId

        
    }

    ///////////////////////////////////////////////////////////////
    void process(PPrivacy n) {
        if (n instanceof APublicPrivacy) process((APublicPrivacy)n);
	else if (n instanceof ABlankPrivacy) process((ABlankPrivacy)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PPrivacy)");

      //  
    }

    ///////////////////////////////////////////////////////////////
    void process(APublicPrivacy n) {
        n.getPublic();				// yields TPublic

     //   
    }

    ///////////////////////////////////////////////////////////////
    void process(ABlankPrivacy n) {

     //   
    }

    ///////////////////////////////////////////////////////////////
    Type process(PType n) {
        if (n instanceof AType) return process((AType)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PType)");  
    }

    ///////////////////////////////////////////////////////////////
    Type process(AType n) {
    	Type returnType=typechecker.getType(n.getId());
    	if (n.getEmptydim().size()==0){
    		if (returnType!=null)
    			return returnType;
    		else 
    			throw new TypecheckerException(n.getId(),"Specified type not allowed");
    	}
    	
    	
        for (PEmptydim p : n.getEmptydim()){
        	returnType=typechecker.makeArrayType(returnType, n.getId()); 
        }
       
        return returnType;
    }

    ///////////////////////////////////////////////////////////////
    void process(PStmt n) {
        if (n instanceof AWhileStmt) process((AWhileStmt)n);
	else if (n instanceof ADeclStmt) process((ADeclStmt)n);   
	else if (n instanceof ABlockStmt) process((ABlockStmt)n);
	else if (n instanceof AIfStmt) process((AIfStmt)n);
	else if (n instanceof AExprStmt) process((AExprStmt)n);
	else if (n instanceof AReturnStmt) process((AReturnStmt)n);
	else if (n instanceof APrintStmt) process((APrintStmt)n);
	else if (n instanceof AEmptyStmt) process((AEmptyStmt)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PStmt)");

        
    }

    ///////////////////////////////////////////////////////////////
    void process(AWhileStmt n) {
       // n.getWhile();				// yields TWhile
        //n.getLparen();				// yields TLparen
    	
    	if (!process(n.getExpr()).getType().isBoolean()){		// process(PExpr)
    		throw new TypecheckerException(n.getLparen(),"Condition in a while statement needs to be of boolean type.");
    	}	
        //n.getRparen();				// yields TRparen
        st.incScope(false);
        process(n.getStmt());			// process(PStmt)
        st.decScope();
        
    }

    ///////////////////////////////////////////////////////////////
    void process(ADeclStmt n) {    
    	Type type=process(n.getType());			// process(PType)
        n.getId();				// yields TId
        System.out.println("DECL "+n+ " processed type "+type);
        st.addEntry(n.getId().getText().trim(),new Var(n.getId().getText().trim(), type),n.getId());         
        n.getSemi();				// yields TSemi

        
    }

    ///////////////////////////////////////////////////////////////
    void process(ABlockStmt n) {
        n.getLbrace();				// yields TLbrace
        st.incScope(false);
	for (PStmt p : n.getStmt())
	    process(p);				// process(PStmt)
        n.getRbrace();				// yields TRbrace
        st.decScope();
        
    }

    ///////////////////////////////////////////////////////////////
    void process(AIfStmt n) {
        //n.getIf();				// yields TIf
        //n.getLparen();				// yields TLparen
        //process(n.getExpr());			// process(PExpr)
        //n.getRparen();				// yields TRparen
        
        if (!process(n.getExpr()).getType().isBoolean()){		// process(PExpr)
    		throw new TypecheckerException(n.getLparen(),"Condition in an if statement needs to be of boolean type.");
    	}	
        
        st.incScope(false);
        process(n.getThenclause());			// process(PStmt)
        //n.getElse();				// yields TElse
        st.decScope();
       
        st.incScope(false);
        process(n.getElseclause());			// process(PStmt)
        st.decScope();
        
    }

    ///////////////////////////////////////////////////////////////
    void process(AExprStmt n) {
        process(n.getExpr());			// process(PExpr)
        n.getSemi();				// yields TSemi    
    }

    ///////////////////////////////////////////////////////////////
    void process(AReturnStmt n) {
        n.getReturn();				// yields TReturn
        
        if (st.activeMethod==null){
        	throw new TypecheckerException(n.getReturn(),"Return statement has to be inside a method.");        	
        }

        ExprType returnExpr=new ExprType(null,Type.voidType);
        if (n.getExpr() != null)
            returnExpr=process(n.getExpr());		// process(PExpr)             
        //n.getSemi();				// yields TSemi          
        System.out.println(returnExpr.getType()+" "+st.activeMethod.returnType());
        Type returnedType=returnExpr.getType();//Actual returned type
        Type expReturnType=st.activeMethod.returnType();//Expected return type
        
        if ((!returnedType.canAssignTo(expReturnType) && !expReturnType.isVoid()) 
        	|| (expReturnType.isVoid() && !returnedType.isVoid()) ){        	
        	throw new TypecheckerException(n.getReturn(),"Returned type does not match the expected return type in method header.");
        }
        

        
    }

    ///////////////////////////////////////////////////////////////
    void process(APrintStmt n) {
        n.getPrint();				// yields TPrint
        n.getLparen();				// yields TLparen
        //process(n.getExpr());			// process(PExpr)
        n.getRparen();				// yields TRparen
        n.getSemi();				// yields TSemi        
        if (process(n.getExpr()).getType().isVoid()){
        	throw new TypecheckerException(n.getLparen(),"Void type can't be printed.");
        }
        
    }

    ///////////////////////////////////////////////////////////////
    void process(AEmptyStmt n) {
        n.getSemi();				// yields TSemi
    
    }
    ///////////////////////////////////////////////////////////////
    ExprType process(PExpr n) {
        if (n instanceof AAssignExpr) return process((AAssignExpr)n);
	else if (n instanceof AExprExpr) return process((AExprExpr)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PExpr)");    
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AAssignExpr n) {    
    	
    	//process(n.getLhs()); // process(TLhs)
    	//Looking up the localVarMap in Typechecker to see the type of lhs
    	//System.out.println(" AAssignExpr "+n+" -"+n.getLhs()+"-");
    	//System.out.println("lookup lhs"+st.lookUp(n.getLhs().toString().trim()));
    	 //n.getAssign();				// yields TAssign
    	ExprType lhsExprType=process(n.getLhs());    
    	Type lhsType=lhsExprType.getType();
    	
    	ExprType rhsExprType=process(n.getExpr());
        Type rhsType=rhsExprType.getType(); //Getting type from ExprType
   
    	if (!rhsType.canAssignTo(lhsType)){
        	throw new TypecheckerException(n.getAssign(),"Cannot assign "+rhsType.toString()+" to "+ lhsType.toString());
        }			
    	System.out.println("Assignment is : "+n.getExpr()+"-----------------------");
        return process(n.getExpr());			// process(PExpr)      
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AExprExpr n) {    	
    	return process(n.getExpr10());			// process(PExpr10)

        //
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PExpr10 n) {
        if (n instanceof AOrExpr10) return process((AOrExpr10)n);
	else if (n instanceof AExprExpr10) return process((AExprExpr10)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PExpr10)");

        //
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AOrExpr10 n) {
        process(n.getLeft());			// process(PExpr10)
        //n.getOr();				// yields TOr
        process(n.getRight());			// process(PExpr20)
        
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AExprExpr10 n) {
        return process(n.getExpr20());			// process(PExpr20)
        //
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PExpr20 n) {
        if (n instanceof AAndExpr20) return process((AAndExpr20)n);
	else if (n instanceof AExprExpr20) return process((AExprExpr20)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PExpr20)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AAndExpr20 n) {
        process(n.getLeft());			// process(PExpr20)
        //n.getAnd();				// yields TAnd
        process(n.getRight());			// process(PExpr30)
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AExprExpr20 n) {
        return process(n.getExpr30());			// process(PExpr30)

        //
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PExpr30 n) {
        if (n instanceof AEqExpr30) return process((AEqExpr30)n);
	else if (n instanceof ANeExpr30) return process((ANeExpr30)n);
	else if (n instanceof AExprExpr30) return process((AExprExpr30)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PExpr30)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AEqExpr30 n) {
        process(n.getLeft());			// process(PExpr30)
        n.getEq();				// yields TEq
        process(n.getRight());			// process(PExpr40)        
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ANeExpr30 n) {
        process(n.getLeft());			// process(PExpr30)
        process(n.getRight());			// process(PExpr40)
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AExprExpr30 n) {
        return process(n.getExpr40());			// process(PExpr40)
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PExpr40 n) {
        if (n instanceof ALtExpr40) return process((ALtExpr40)n);
	else if (n instanceof ALeExpr40) return process((ALeExpr40)n);
	else if (n instanceof AGeExpr40) return process((AGeExpr40)n);
	else if (n instanceof AGtExpr40) return process((AGtExpr40)n);
	else if (n instanceof AExprExpr40) return process((AExprExpr40)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PExpr40)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ALtExpr40 n) {
        process(n.getLeft());			// process(PExpr40)
        process(n.getRight());			// process(PExpr50)
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ALeExpr40 n) {
        process(n.getLeft());			// process(PExpr40)       
        process(n.getRight());			// process(PExpr50)
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AGeExpr40 n) {
        process(n.getLeft());			// process(PExpr40)
        process(n.getRight());			// process(PExpr50)
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AGtExpr40 n) {
        process(n.getLeft());			// process(PExpr40)       
        process(n.getRight());			// process(PExpr50)
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AExprExpr40 n) {
        return process(n.getExpr50());			// process(PExpr50)
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PExpr50 n) {
        if (n instanceof APlusExpr50) return process((APlusExpr50)n);
	else if (n instanceof AMinusExpr50) return process((AMinusExpr50)n);
	else if (n instanceof ATermExpr50) return process((ATermExpr50)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PExpr50)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(APlusExpr50 n) {
        process(n.getLeft());			// process(PExpr50)
        process(n.getRight());			// process(PTerm)\
        //If one of the terms is a string this is essentially a concatenation operation and should return a stringType instead of intType
        if (process(n.getLeft()).getType().isString() ||  process(n.getRight()).getType().isString())
        	return new ExprType(null,Type.stringType);
        return new ExprType(null,Type.intType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AMinusExpr50 n) {
        process(n.getLeft());			// process(PExpr50)
        process(n.getRight());			// process(PTerm)
        return new ExprType(null,Type.intType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ATermExpr50 n) {    	
        return process(n.getTerm());			// process(PTerm)
   }

    ///////////////////////////////////////////////////////////////
    ExprType process(PTerm n) {
    	//System.out.println("PTerm");
        if (n instanceof ATimesTerm) return process((ATimesTerm)n);
	else if (n instanceof ADivTerm) return process((ADivTerm)n);
	else if (n instanceof AModTerm) return process((AModTerm)n);
	else if (n instanceof AFactorTerm) return process((AFactorTerm)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PTerm)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ATimesTerm n) {
    	//System.out.println("ATimesTerm "+n);
        process(n.getLeft());			// process(PTerm)
        process(n.getRight());			// process(PFactor)
        if (!process(n.getLeft()).getType().isInt() || !process(n.getRight()).getType().isInt()){
        	throw new TypecheckerException(n.getTimes(),"Only integer multiplication allowed.");
        }
        return new ExprType(null,Type.intType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ADivTerm n) {
        process(n.getLeft());			// process(PTerm)
        process(n.getRight());			// process(PFactor)
        return new ExprType(null,Type.intType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AModTerm n) {
        process(n.getLeft());			// process(PTerm)
        process(n.getRight());			// process(PFactor)
        return new ExprType(null,Type.intType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AFactorTerm n) {
        return process(n.getFactor());			// process(PFactor)
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PFactor n) {
    	//System.out.println("PFactor");
        if (n instanceof APrimaryFactor) return process((APrimaryFactor)n);
	else if (n instanceof AIdFactor) return process((AIdFactor)n);
	else if (n instanceof ALengthFactor) return process((ALengthFactor)n);
	else if (n instanceof ALength2Factor) return process((ALength2Factor)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PFactor)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(APrimaryFactor n) {
        return process(n.getPrimary());			// process(PPrimary)
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AIdFactor n) {    	
        Type type= typechecker.getTypeFromId(n.getId());				
        //
        //System.out.println(n+" is of type "+ type);
        return new ExprType(null,type);
        //
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ALengthFactor n) {
    	//System.out.println("ALengthFactor" +n);
        n.getId();				// yields TId
        n.getDot();				// yields TDot
        n.getLength();				// yields TLength
        
        if (!typechecker.getTypeFromId(n.getId()).isArray()){
        	throw new TypecheckerException(n.getId(),"The specified variable does not have length function");
        }
        return new ExprType(null,Type.intType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ALength2Factor n) {
    	
    	n.getId();				// yields TId
        n.getDot();				// yields TDot
        n.getLength();				// yields TLength
        n.getLparen();				// yields TLparen
        n.getRparen();				// yields TRparen
        if (!typechecker.getTypeFromId(n.getId()).isString()){
        	throw new TypecheckerException(n.getId(),"The specified variable does not have length() function");
        }
        return new ExprType(null,Type.intType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PPrimary n) {
        if (n instanceof ANewarrayPrimary) return process((ANewarrayPrimary)n);
	else if (n instanceof APrimary2Primary) return process((APrimary2Primary)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PPrimary)");

        //
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ANewarrayPrimary n) {
        //n.getNew();				// yields TNew
        Type type= new ArrayType(typechecker.getType(n.getId()));
        //n.getLbrack();				// yields TLbrack
        //process(n.getExpr());			// process(PExpr)                
        //n.getRbrack();				// yields TRbrack
        if (!process(n.getExpr()).getType().isInt()){
        	throw new TypecheckerException(n.getId(),"Array size should be an int type.");
        }
	for (PEmptydim p : n.getEmptydim()){
	    process(p);				// process(PEmptydim)
	    type=new ArrayType(type);
	}
		return new ExprType(null,type);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(APrimary2Primary n) {
        return process(n.getPrimary2());			// process(PPrimary2)
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PPrimary2 n) {    	    	
        if (n instanceof AIconstPrimary2) return process((AIconstPrimary2)n);
	else if (n instanceof ASconstPrimary2) return process((ASconstPrimary2)n);
	else if (n instanceof ANullPrimary2) return process((ANullPrimary2)n);
	else if (n instanceof ATruePrimary2) return process((ATruePrimary2)n);
	else if (n instanceof AFalsePrimary2) return process((AFalsePrimary2)n);
	else if (n instanceof AParensPrimary2) return process((AParensPrimary2)n);
	else if (n instanceof ACallPrimary2) return process((ACallPrimary2)n);
	else if (n instanceof AArrayrefPrimary2) return process((AArrayrefPrimary2)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PPrimary2)");

        //
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AIconstPrimary2 n) {    	
        n.getIconst();				// yields TIconst
        return new ExprType(null,Type.intType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ASconstPrimary2 n) {
    	//System.out.println("String");
        n.getSconst();				// yields TSconst
        return new ExprType(null,Type.stringType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ANullPrimary2 n) {
        n.getNull();				// yields TNull
        return new ExprType(null,Type.nullType);      
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ATruePrimary2 n) {
        n.getTrue();				// yields TTrue
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AFalsePrimary2 n) {
        n.getFalse();				// yields TFalse
        return new ExprType(null,Type.booleanType);
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AParensPrimary2 n) {
        //n.getLparen();				// yields TLparen
        return process(n.getExpr());			// process(PExpr)
        //n.getRparen();				// yields TRparen
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ACallPrimary2 n) {
    	//System.out.println("ACallPrimary2"+n);
        //n.getId();				// yields TId
        //n.getLparen();				// yields TLparen
    	//System.out.println("getId() : "+n.getId());
    	List <ExprType> argListExpr=new ArrayList<ExprType>();
    	
        if (n.getArglist() != null){        	
        	//Processing the parameters in process(PArglist). Passing n.getId() to identify the method name being called
            argListExpr=process(n.getArglist());		// process(PArglist)            
        }
        
        List<Type> argListType=new ArrayList<Type>();
        for(ExprType e:argListExpr){
        	argListType.add(e.getType());
        	System.out.println(e.getType());
        }        
        if (!typechecker.checkMethodHeaderAndArgs(n.getId().toString(),argListType, n.getId()))
			throw new TypecheckerException(n.getId(),"Method with this name and arguments does not exist");
        
        
        //n.getRparen();				// yields TRparen
        return new ExprType(null,typechecker.methodReturnType(n.getId()));        
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AArrayrefPrimary2 n) {
        return process(n.getArrayref());			// process(PArrayref)
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PArrayref n) {
        if (n instanceof ANameArrayref) return process((ANameArrayref)n);
	else if (n instanceof APrimaryArrayref) return process((APrimaryArrayref)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PArrayref)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(ANameArrayref n) {
        //n.getId();				// yields TId
        //n.getLbrack();				// yields TLbrack    	              
        //System.out.println("ANameArrayref : "+typechecker.getTypeFromId(n.getId()));
        //n.getRbrack();				// yields TRbrack
        if (!(st.lookUp(n.getId().getText().toString().trim()) && st.returnType(n.getId().getText().toString().trim()).isArray())){
        	throw new TypecheckerException(n.getId(),"Refereced array does not exist.");
        }
        Type t=typechecker.getTypeFromId(n.getId());
        
        if (!process(n.getExpr()).getType().isInt()){
        	throw new TypecheckerException(n.getId(),"Array reference expression should be an int.");
        }
        
        return new ExprType(null, typechecker.getTypeFromId(n.getId()));
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(APrimaryArrayref n) {     
        //n.getLbrack();				// yields TLbrack
        process(n.getExpr());			// process(PExpr)
        //n.getRbrack();				// yields TRbrack
        return process(n.getPrimary2());			// process(PPrimary2)
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PLhs n) {
        if (n instanceof AIdLhs) return process((AIdLhs)n);
	else if (n instanceof AArrayrefLhs) return process((AArrayrefLhs)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PLhs)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AIdLhs n) {

    	// n.getId();				// yields TId
    	
    	if (!st.lookUp(n.toString())){
    		 throw new TypecheckerException(n.getId(),"No variable with given ID");
    	}
    	
        return new ExprType(null,st.returnType(n.getId().getText()));   
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AArrayrefLhs n) {    	
    	return process(n.getArrayref());			// process(PArrayref)
    }

    ///////////////////////////////////////////////////////////////
    List<ExprType> process(PArglist n) { 
        if (n instanceof AListArglist)  return process((AListArglist)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PArglist)");
    }
     
    List <ExprType> process(AListArglist n) {
    	//process(n.getExpr());			// process(PExpr)
    List <ExprType> t=new ArrayList <ExprType>();        
    t.add(process(n.getExpr()));
    
    for (PArg p : n.getArg()){
    	//    process(p);				// process(PArg)
	    t.add(process(p));	    
	}    
	return t;
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(PArg n) {
        if (n instanceof AArg)  return process((AArg)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PArg)");
    }

    ///////////////////////////////////////////////////////////////
    ExprType process(AArg n) {
        n.getComma();				// yields TComma
        return process(n.getExpr());			// process(PExpr)
        //returning type since that's the only thing that matters in argumentList
    }

    ///////////////////////////////////////////////////////////////
    void process(PEmptydim n) {
        if (n instanceof AEmptydim) process((AEmptydim)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PEmptydim)");
    }

    ///////////////////////////////////////////////////////////////
    void process(AEmptydim n) {
        n.getLbrack();				// yields TLbrack
        n.getRbrack();				// yields TRbrack
    }
	
    static class Expr{}
	static class ExprType{
		Expr expr;
		Type type;
		ExprType(Expr e, Type t){
			expr=e;
			type=t;
		}
		public Type getType(){
			return type;
		}
	}

}
